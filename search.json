[{"path":"https://d2gex.github.io/temploapiclient/articles/environmental_readings_and_detections.html","id":"initial-setup-and-api-credentials","dir":"Articles","previous_headings":"","what":"Initial Setup and Api Credentials","title":"Environmental readings and detections","text":"Please see station_and_receptors details make available showcased package temploapiclient vignette.","code":"project_folder <- dirname(getwd()) path_to_env <- file.path(project_folder, \".env\") readRenviron(path_to_env) api_base_url <- Sys.getenv(\"API_BASE_URL\") api_headers <- list(\"Accept\" = \"application/json\", \"Content-type\" = \"application/json\") api_auth_token <- Sys.getenv(\"AUTH_TOKEN\") if (!length(api_auth_token)) {   api_auth_token <- NULL } templo_client <- temploapiclient::TemploApiClient$new(api_base_url, api_headers, api_auth_token) library(\"magrittr\") # Make '%>%' available throughout the vignette"},{"path":"https://d2gex.github.io/temploapiclient/articles/environmental_readings_and_detections.html","id":"fetching-environmental-readings","dir":"Articles","previous_headings":"","what":"Fetching environmental readings","title":"Environmental readings and detections","text":"Deployed receptors equipped sensors measure oceanographic variables temperature, pressure, etc… readings can obtained API . Readings generate fine time resolution, advised fetch two o three days worth data time. Otherwise, API call may time result error. example fetching three days worth data 10th, 11th 12th October 2024. just selecting renaming fields showcasing purposes. hit interval time data produced empty dataset returned instead.","code":"api_data <- templo_client$get_environmental_readings(from_date = \"2024-10-10\", to_date = \"2024-10-12\") #> INFO [2024-11-14 17:08:07] Fetching environmental readings from  2024-10-10 to 2024-10-12 ... This may take a few seconds #> INFO [2024-11-14 17:08:10] --->Finished head(api_data) %>%   dplyr::rename(c(     variable = environmental_variable_name,     receptor = receptor_name,     station = station_name,     lat = latitude,     lon = longitude   )) %>%   dplyr::select(     station,     receptor,     lat,     lon,     variable,     reading_time,     value   ) #>   station receptor     lat       lon  variable        reading_time value #> 1    Cíes     Cíes 42.2107 -8.898333 FREQUENCY 2024-10-10 00:09:42    69 #> 2    Cíes     Cíes 42.2107 -8.898333 FREQUENCY 2024-10-10 00:19:42    69 #> 3    Cíes     Cíes 42.2107 -8.898333 FREQUENCY 2024-10-10 00:29:42    69 #> 4    Cíes     Cíes 42.2107 -8.898333 FREQUENCY 2024-10-10 00:39:42    69 #> 5    Cíes     Cíes 42.2107 -8.898333 FREQUENCY 2024-10-10 00:49:42    69 #> 6    Cíes     Cíes 42.2107 -8.898333 FREQUENCY 2024-10-10 00:59:42    69 api_data <- templo_client$get_environmental_readings(from_date = \"2024-01-01\", to_date = \"2024-02-02\") #> INFO [2024-11-14 17:08:10] Fetching environmental readings from  2024-01-01 to 2024-02-02 ... This may take a few seconds #> INFO [2024-11-14 17:08:10] --->Finished api_data %>%   assertr::verify(!nrow(.)) #> # A tibble: 0 × 0"},{"path":"https://d2gex.github.io/temploapiclient/articles/environmental_readings_and_detections.html","id":"fetching-detections","dir":"Articles","previous_headings":"","what":"Fetching detections","title":"Environmental readings and detections","text":"Detections emitted sensors fitted tags surgically inserted individuals read oceanographic variables . Similar environmental readings, detections downloaded small chunks avoid API timing producing results. results massaged data provide contextual column names trimmed detections produced value.","code":"api_data <- templo_client$get_dataframe_end_point(end_point = \"detections/data_exports/\", parameters = list(   format = \"json\", # this parameters, for our purposes needs no change.   from_date = \"2024-10-02\",   to_date = \"2024-10-03\" )) #> INFO [2024-11-14 17:08:10] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:12] --->Finished api_data %>%   dplyr::mutate(detection_value = as.numeric(detection_value)) %>%   dplyr::filter(assertr::not_na(detection_value)) %>%   dplyr::select(     sensor_id,     sensor_name,     individual_tag,     tag_model,     scientific_name,     station_name,     receptor_name,     detection_time,     detection_value   ) %>%   dplyr::rename(c(     id = sensor_id,     sensor = sensor_name,     individiual_id = individual_tag,     station = station_name,     receptor = receptor_name,     time = detection_time,     value = detection_value   )) %>%   head() #>     id      sensor individiual_id tag_model scientific_name station receptor #> 1 1155    PRESSURE MOVE-RUN-23-32  03EX1155   Raja undulata    Cíes     Cíes #> 2 1156 TEMPERATURE MOVE-RUN-23-32  03EX1156   Raja undulata    Cíes     Cíes #> 3 1100 TEMPERATURE MOVE-RUN-23-11  03E51100   Raja undulata    Cíes     Cíes #> 4 1151    PRESSURE MOVE-RUN-23-30  03EV1151   Raja undulata    Cíes     Cíes #> 5 1152 TEMPERATURE MOVE-RUN-23-30  03EV1152   Raja undulata    Cíes     Cíes #> 6 1196 TEMPERATURE MOVE-RUN-23-02  03FH1196   Raja undulata    Cíes     Cíes #>                  time value #> 1 2024-10-03 22:48:46    23 #> 2 2024-10-03 22:02:21   157 #> 3 2024-10-03 21:38:23   160 #> 4 2024-10-03 21:18:49  4095 #> 5 2024-10-03 20:59:59   159 #> 6 2024-10-03 20:40:53   159"},{"path":"https://d2gex.github.io/temploapiclient/articles/station_and_receptors.html","id":"initial-setup-and-api-credentials","dir":"Articles","previous_headings":"","what":"Initial Setup and Api Credentials","title":"Create stations, receptors and link them","text":"setup consistent across vignettes copied demonstration purposes. run entire vignette , new R session start time, make sure install temploapiclient package beforehand. can using install.packages, renv::install virtual environments, pkgdown::build_site want generate local documentation. last command also temporarily install R package showcased make available vignettes. Alternatively, ’d like run section individually, load temploapiclient devtools::load_all set working directory temploapiclient/vignettes using setwd(). Last least, already installed package none necessary. let’s instantiate client query TEMPLO api","code":"project_folder <- dirname(getwd()) path_to_env <- file.path(project_folder, \".env\") readRenviron(path_to_env) api_base_url <- Sys.getenv(\"API_BASE_URL\") api_headers <- list(\"Accept\" = \"application/json\", \"Content-type\" = \"application/json\") api_auth_token <- Sys.getenv(\"AUTH_TOKEN\") if (!length(api_auth_token)) {   api_auth_token <- NULL } templo_client <- temploapiclient::TemploApiClient$new(api_base_url, api_headers, api_auth_token) library(\"magrittr\") # Make '%>%' available throughout the vignette"},{"path":"https://d2gex.github.io/temploapiclient/articles/station_and_receptors.html","id":"creating-stations-receptors-and-linking-both","dir":"Articles","previous_headings":"","what":"Creating stations, receptors and linking both","title":"Create stations, receptors and link them","text":"Stations receptors 1:N relationship one station associated multiple receptors. order build relationship following steps need taken chronological order: Add station already created. Add many receptors, one one, required. Link station potential associated receptors. Repeat 1 4 many stations required.","code":""},{"path":"https://d2gex.github.io/temploapiclient/articles/station_and_receptors.html","id":"creating-stations","dir":"Articles","previous_headings":"Creating stations, receptors and linking both","what":"Creating stations","title":"Create stations, receptors and link them","text":"Create new receptor give name “Cies 2”. something unexpected happens, error outputted. code commented record can inserted . Tough shown , successful, api call return record just inserted new generated id. chunk set run anymore can run . Set eval=TRUE want run , however remember provide different unique name. Ensure receptor sent stored database retrieving API.","code":"ret <- templo_client$add_single_record_and_fetch_id(end_point = \"stations/\", data = list(   name = \"Cies 2\",   description = \"Western area of cies\" )) api_data <- templo_client$get_dataframe_end_point(end_point = \"stations/\") #> INFO [2024-11-14 17:08:14] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:15] --->Finished api_data %>%   dplyr::filter(name == \"Cies 2\") %>%   assertr::verify(nrow(.) == 1) # It will halt the execution and print an error if such record does not exist #>     name  id          description #> 1 Cies 2 198 Western area of cies"},{"path":"https://d2gex.github.io/temploapiclient/articles/station_and_receptors.html","id":"creating-receptors","dir":"Articles","previous_headings":"Creating stations, receptors and linking both","what":"Creating receptors","title":"Create stations, receptors and link them","text":"Receptors, besides name, requires unique string identify stored serial_id. receptors, new generated id returned successful. Otherwise, error printed.eval=FALSE prevents chunk running. Ensure station sent stored database retrieving API.","code":"serial_id <- stringi::stri_rand_strings(1, 10) ret <- templo_client$add_single_record_and_fetch_id(end_point = \"receptors/\", data = list(   name = \"Buoy C21\",   serial_id = serial_id,   description = \"Receptor set up on a buoy\" )) api_data <- templo_client$get_dataframe_end_point(end_point = \"receptors/\") #> INFO [2024-11-14 17:08:15] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:15] --->Finished api_data %>%   dplyr::filter(name == \"Buoy C21\") %>%   assertr::verify(nrow(.) == 1) #>                 description     name id  serial_id #> 1 Receptor set up on a buoy Buoy C21  9 sTMPrWTY6C"},{"path":"https://d2gex.github.io/temploapiclient/articles/station_and_receptors.html","id":"associating-receptors-to-stations","dir":"Articles","previous_headings":"Creating stations, receptors and linking both","what":"Associating receptors to stations","title":"Create stations, receptors and link them","text":"created receptors stations separately, may associate using table relate two, represented endpoint stations_receptors. Notice ’ve got picking ids returned earlier calls.eval=FALSE prevents chunk running. , demonstrative purposes, ensure association successfully implemented querying API.","code":"data <- list(   stations_id = 198, # station that we just created by the name of \"Cies 2\"   receptors_id = 9, # receptor stored as \"Buoy C21\"   is_active = TRUE, # it indicates the receptor is active   latitude = 42.2134,   longitude = -8.8987,   deployment_date = \"2024-11-07 08:25:00\" # Notice that dates are in yms_hms format ) ret <- templo_client$add_single_record_and_fetch_id(end_point = \"stations_receptors/\", data = data) api_data <- templo_client$get_dataframe_end_point(end_point = \"stations_receptors/\") #> INFO [2024-11-14 17:08:15] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:16] --->Finished api_data %>%   dplyr::filter(stations_id == 198 & receptors_id == 9) %>%   assertr::verify(nrow(.) == 1) #>   receptors_id id stations_id latitude notes is_active     deployment_date #> 1            9  7         198  42.2134  <NA>      TRUE 2024-11-07T08:25:00 #>   longitude #> 1   -8.8987"},{"path":"https://d2gex.github.io/temploapiclient/articles/station_and_receptors.html","id":"errors-while-sending","dir":"Articles","previous_headings":"Creating stations, receptors and linking both","what":"Errors while sending","title":"Create stations, receptors and link them","text":"record can exist relational database trying twice error prompted. … miss required field name get “field required” error","code":"ret <- templo_client$add_single_record_and_fetch_id(end_point = \"stations/\", data = list(   name = \"Cies 2\", # name is an unique field and already exists in the database   description = \"Western area of cies\" )) #> INFO [2024-11-14 17:08:16] Sending data to  stations/ ... #> ERROR [2024-11-14 17:08:16] Detected a 'duplicate' keyword. You may have inserted a record that already exist      in the database. See error below. #> { #>   \"error\": [\"IntegrityError\"], #>   \"details\": [\"(MySQLdb.IntegrityError) (1062, \\\"Duplicate entry 'Cies 2' for key 'stations.name_UNIQUE'\\\")\"] #> }ERROR [2024-11-14 17:08:16] Data could not be send ret <- templo_client$add_single_record_and_fetch_id(end_point = \"stations/\", data = list(   description = \"Western area of cies\" )) #> INFO [2024-11-14 17:08:16] Sending data to  stations/ ... #> ERROR [2024-11-14 17:08:16] Detected a 'field required' keyword. You may be missing an essential field in your query. Look      'loc' section for clues #> { #>   \"detail\": [ #>     { #>       \"type\": [\"missing\"], #>       \"loc\": [ #>         [\"body\"], #>         [\"name\"] #>       ], #>       \"msg\": [\"Field required\"], #>       \"input\": { #>         \"description\": [\"Western area of cies\"] #>       } #>     } #>   ] #> }ERROR [2024-11-14 17:08:16] Data could not be send"},{"path":"https://d2gex.github.io/temploapiclient/articles/station_and_receptors.html","id":"deleting-a-record","dir":"Articles","previous_headings":"Creating stations, receptors and linking both","what":"Deleting a record","title":"Create stations, receptors and link them","text":"Let’s create new station delete right away. Let’s ensure record inserted database. Now let’s deleted… … , ensure record longer exists","code":"new_record <- templo_client$add_single_record_and_fetch_id(end_point = \"stations/\", data = list(   name = \"Cies 3\",   description = \"Eastern area of cies\" )) #> INFO [2024-11-14 17:08:16] Sending data to  stations/ ... #> INFO [2024-11-14 17:08:16] --->Finished new_record #> $name #> [1] \"Cies 3\" #>  #> $id #> [1] 398 #>  #> $description #> [1] \"Eastern area of cies\" api_data <- templo_client$get_dataframe_end_point(end_point = \"stations/\") #> INFO [2024-11-14 17:08:16] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:16] --->Finished api_data %>%   dplyr::filter(name == \"Cies 3\") %>%   assertr::verify(nrow(.) == 1) #>            description  id   name #> 1 Eastern area of cies 398 Cies 3 ret <- templo_client$delete_single_record(end_point = \"stations/\", data = list(   id = new_record$id )) #> INFO [2024-11-14 17:08:16] Deleting data from  stations/ ... #> INFO [2024-11-14 17:08:17] --->Finished ret #> [1] TRUE api_data <- templo_client$get_dataframe_end_point(end_point = \"stations/\") #> INFO [2024-11-14 17:08:17] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:17] --->Finished api_data %>%   dplyr::filter(name == \"Cies 3\") %>%   assertr::verify(nrow(.) == 0) #> [1] name        id          description #> <0 rows> (or 0-length row.names)"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"initial-setup-and-api-credentials","dir":"Articles","previous_headings":"","what":"Initial Setup and Api Credentials","title":"Create species, individuals, tags, sensors and link them all","text":"Please see station_and_receptors details make available showcased package temploapiclient vignette.","code":"project_folder <- dirname(getwd()) path_to_env <- file.path(project_folder, \".env\") readRenviron(path_to_env) api_base_url <- Sys.getenv(\"API_BASE_URL\") api_headers <- list(\"Accept\" = \"application/json\", \"Content-type\" = \"application/json\") api_auth_token <- Sys.getenv(\"AUTH_TOKEN\") if (!length(api_auth_token)) {   api_auth_token <- NULL } templo_client <- temploapiclient::TemploApiClient$new(api_base_url, api_headers, api_auth_token) library(\"magrittr\") # Make '%>%' available throughout the vignette"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"initial-setup-and-api-credentials-1","dir":"Articles","previous_headings":"","what":"Initial Setup and Api Credentials","title":"Create species, individuals, tags, sensors and link them all","text":"order add tagged individuals database given using relational databases, four elements making relationship inserted one one chronological order follows: Insert first species yet database Insert associated sensors tags Insert tags Insert individuals Establish necessary links . Fortunately us, API shipped method wraps last 4 actions allowing completed .","code":""},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"creating-species-individuals-tags-sensors-and-linking-them-all","dir":"Articles","previous_headings":"Initial Setup and Api Credentials","what":"Creating species, individuals, tags, sensors and linking them all","title":"Create species, individuals, tags, sensors and link them all","text":"Species table contains two unique names: scientific_name common_name. means names duplicated way across, example, two records. double-check faneca sent stored successfully.","code":"ret <- templo_client$add_single_record_and_fetch_id(end_point = \"species/\", data = list(   scientific_name = \"Trisopterus luscus\",   common_name = \"Faneca\" )) ret api_data <- templo_client$get_dataframe_end_point(end_point = \"species/\") #> INFO [2024-11-14 17:08:21] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:21] --->Finished api_data %>%   dplyr::filter(common_name == \"Faneca\") %>%   assertr::verify(nrow(.) == 1) # It will halt the execution and print an error if such record does not exist #>      scientific_name common_name id fao #> 1 Trisopterus luscus      Faneca 13  NA"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"create-sensor-type","dir":"Articles","previous_headings":"Initial Setup and Api Credentials","what":"Create sensor type","title":"Create species, individuals, tags, sensors and link them all","text":"tag associated certain type sensors measure oceanographic variables pressure temperature. species, need ensure sensor types already exist database trying associate sensor kind tag turn, individual. code shows, already different types sensors PRESSURE, TEMPERATURE DEPTH. Let’s assume wanted add another one measure salinity. species : check record sent successfully. Please notice field type_name unique duplicated measured variables.","code":"api_data <- templo_client$get_dataframe_end_point(end_point = \"sensortypes/\") #> INFO [2024-11-14 17:08:21] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:21] --->Finished api_data #>    id    type_name #> 1   4     ACTIVITY #> 2   5 CONDUCTIVITY #> 3   1        DEPTH #> 4   6    MORTALITY #> 5  17        NUEVO #> 6  38     PRESSURE #> 7  39     SALINITY #> 8   7       string #> 9   3  TEMPERATURE #> 10  2         TILT ret <- templo_client$add_single_record_and_fetch_id(end_point = \"sensortypes/\", data = list(   type_name = \"SALINITY\" )) ret api_data <- templo_client$get_dataframe_end_point(end_point = \"sensortypes/\") #> INFO [2024-11-14 17:08:22] Fetching data from api... This may take a few seconds #> INFO [2024-11-14 17:08:22] --->Finished api_data %>%   dplyr::filter(type_name == \"SALINITY\") %>%   assertr::verify(nrow(.) == 1) #>   id type_name #> 1 39  SALINITY"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"tagged_individuals-dataframe-build-up","dir":"Articles","previous_headings":"Initial Setup and Api Credentials","what":"‘tagged_individuals’ dataframe build-up","title":"Create species, individuals, tags, sensors and link them all","text":"previous insertion identified species faneca added id=13 sensor ids SALINITY = 39, PRESSURE = 38,TEMPERATURE = 3. Next, create dataframe contains data individuals wish insert, along associated tagging details. Let’s assume scenario want add two individuals, belonging different species Trisopterus lucus Raja undulata. summary scenario follows: Sensors DEPTH PRESSURE Tag external active Sensors SALINITY Tag internal active next steps, create individual datasets species combine single tagged_individuals dataframe sent API. Notice step--step guide required can create whole dataframe means consider suitable.","code":""},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"built-the-sensor-dataframe","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > ‘tagged_individuals’ dataframe build-up","what":"Built the sensor dataframe","title":"Create species, individuals, tags, sensors and link them all","text":"need create two-column dataframe includes sensor’s id, retrieved THELMA, along type (sensor). Next, ’ll construct dataframe three rows represent sensors: two faneca (two sensors) one ray.","code":"datasets <- list() sensor_prefix <- \"sensor_\" # prefix that indicates the logic that fields belong to sensor category sensor_ids <- sample(11700:11800, 3) # 3 random IDS with the hope none of them are in the db already datasets[[length(datasets) + 1]] <- data.frame(merged_id = 1:3) %>% # to merge with following datasets.   dplyr::mutate(     !!paste0(sensor_prefix, \"id\") := sensor_ids,     !!paste0(sensor_prefix, \"sensor\") := c(\"DEPTH\", \"PRESSURE\", \"SALINITY\"),   ) datasets[[1]] #>   merged_id sensor_id sensor_sensor #> 1         1     11744         DEPTH #> 2         2     11722      PRESSURE #> 3         3     11775      SALINITY"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"built-the-tag-dataframe-on-top-of-sensors","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > ‘tagged_individuals’ dataframe build-up","what":"Built the tag dataframe on top of sensor’s","title":"Create species, individuals, tags, sensors and link them all","text":"sensors need use prefix build tag columns name tag_. fields required dataset serial_number, frequency comm_protocol. three fields expected strings obtained THELMA. Notice individuals whose tags multiple sensors need serial_number. dataframe constructed follows:","code":"tag_prefix <- \"tag_\" # Again, we build two random alphanumeric ids for shwocasing purposes random_strings <- stringi::stri_rand_strings(2, 4) serial_ids <- paste0(\"vignette_\", c(rep(random_strings[1], 2), random_strings[2])) frequency <- rep(\"69 kHz\", 3) comm_protocol <- rep(\"Ops\", 3) datasets[[length(datasets) + 1]] <- data.frame(merged_id = 1:3) %>%   dplyr::mutate(     !!paste0(tag_prefix, \"serial_number\") := serial_ids,     !!paste0(tag_prefix, \"frequency\") := frequency,     !!paste0(tag_prefix, \"comm_protocol\") := comm_protocol   ) datasets[[2]] #>   merged_id tag_serial_number tag_frequency tag_comm_protocol #> 1         1     vignette_90SU        69 kHz               Ops #> 2         2     vignette_90SU        69 kHz               Ops #> 3         3     vignette_Hjls        69 kHz               Ops"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"built-the-individual-dataframe","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > ‘tagged_individuals’ dataframe build-up","what":"Built the individual dataframe","title":"Create species, individuals, tags, sensors and link them all","text":"Likewise need build data individual fields follows: 1. individual_id 2. scientific_name 3. common_name 4. sex 5. total_length","code":"options(width = 600) individual_prefix <- \"ind_\" # Again, we build three random alphanumeric ids for shwocasing purposes individual_ids <- paste0(\"MOVE-RUN-\", c(rep(\"fane-01\", 2), \"raj-01\")) scientific_names <- c(rep(\"Trisopterus luscus\", 2), \"Raja undulata\") common_names <- c(rep(\"Faneca\", 2), \"Undulate ray\") sex <- c(1, 1, 2) # two males and one females. We don't know yet what should be assigned for male and female total_lengths <- c(35, 35, 80) # in cms (first two refer to the same individual) datasets[[length(datasets) + 1]] <- data.frame(merged_id = 1:3) %>%   dplyr::mutate(     !!paste0(individual_prefix, \"individual_id\") := individual_ids,     !!paste0(individual_prefix, \"scientific_name\") := scientific_names,     !!paste0(individual_prefix, \"common_name\") := common_names,     !!paste0(individual_prefix, \"sex\") := sex,     !!paste0(individual_prefix, \"total_length\") := total_lengths,   ) datasets[[3]] #>   merged_id ind_individual_id ind_scientific_name ind_common_name ind_sex ind_total_length #> 1         1  MOVE-RUN-fane-01  Trisopterus luscus          Faneca       1               35 #> 2         2  MOVE-RUN-fane-01  Trisopterus luscus          Faneca       1               35 #> 3         3   MOVE-RUN-raj-01       Raja undulata    Undulate ray       2               80"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"built-linking-dataframe","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > ‘tagged_individuals’ dataframe build-up","what":"Built linking dataframe","title":"Create species, individuals, tags, sensors and link them all","text":"Tags individuals linked association three fields determines relationship defined. fields : 1. is_internal: whether tag internal external 2. is_active: whether tag active 3. tagged_date: datetime field following ymd_hms format, .e, 2024-11-04 17:35:35","code":"tag_individual_prefix <- \"tagged_individual_\" # Again, we build three random alphanumeric ids for shwocasing purposes is_internal <- c(TRUE, TRUE, FALSE) is_active <- rep(TRUE, 3) tagged_date <- c(rep(\"2024-11-11 12:02:00\", 2), \"2024-11-11 13:01:17\") datasets[[length(datasets) + 1]] <- data.frame(merged_id = 1:3) %>%   dplyr::mutate(     !!paste0(tag_individual_prefix, \"is_internal\") := is_internal,     !!paste0(tag_individual_prefix, \"is_active\") := is_active,     !!paste0(tag_individual_prefix, \"tagged_date\") := tagged_date   ) datasets[[4]] #>   merged_id tagged_individual_is_internal tagged_individual_is_active tagged_individual_tagged_date #> 1         1                          TRUE                        TRUE           2024-11-11 12:02:00 #> 2         2                          TRUE                        TRUE           2024-11-11 12:02:00 #> 3         3                         FALSE                        TRUE           2024-11-11 13:01:17"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"merge-all-datasets-into-a-single-dataframe","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > ‘tagged_individuals’ dataframe build-up","what":"Merge all datasets into a single dataframe","title":"Create species, individuals, tags, sensors and link them all","text":"Last sending details API need merge datasets.","code":"options(width = 600) tagged_individual_df <- datasets %>%   purrr::reduce(dplyr::full_join, by = \"merged_id\") %>%   dplyr::select(-merged_id)  tagged_individual_df %>%   assertr::verify(nrow(.) == 3) %>%   assertr::verify(!\"merged_id\" %in% names(.)) #>   sensor_id sensor_sensor tag_serial_number tag_frequency tag_comm_protocol ind_individual_id ind_scientific_name ind_common_name ind_sex ind_total_length tagged_individual_is_internal tagged_individual_is_active tagged_individual_tagged_date #> 1     11744         DEPTH     vignette_90SU        69 kHz               Ops  MOVE-RUN-fane-01  Trisopterus luscus          Faneca       1               35                          TRUE                        TRUE           2024-11-11 12:02:00 #> 2     11722      PRESSURE     vignette_90SU        69 kHz               Ops  MOVE-RUN-fane-01  Trisopterus luscus          Faneca       1               35                          TRUE                        TRUE           2024-11-11 12:02:00 #> 3     11775      SALINITY     vignette_Hjls        69 kHz               Ops   MOVE-RUN-raj-01       Raja undulata    Undulate ray       2               80                         FALSE                        TRUE           2024-11-11 13:01:17"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"send-all-details-to-the-api-","dir":"Articles","previous_headings":"Initial Setup and Api Credentials","what":"Send all details to the API.","title":"Create species, individuals, tags, sensors and link them all","text":"ready send details API, … need ensure records actually inserted.","code":"ret <- templo_client$add_tagged_individuals(   tagged_individual_df,   individual_prefix,   tag_prefix,   sensor_prefix,   tag_individual_prefix ) options(width = 600) api_data <- templo_client$get_tagged_individuals(end_point = \"tagged_individuals/\") #> INFO [2024-11-14 17:08:22] Fetching all tagged individuals from the api... This may take a few seconds #> INFO [2024-11-14 17:08:23] ---> Converting results to dataframe... #> INFO [2024-11-14 17:08:26] Fetching all sensor types from the api... This may take a few seconds #> INFO [2024-11-14 17:08:26] --->Finished #> INFO [2024-11-14 17:08:26] --->Finished api_data %>%   dplyr::filter(stringr::str_detect(serial_number, \"vignette\")) %>%   assertr::verify(nrow(.) == 3) #>   sensor_id tagged_individual_id is_internal is_active         tagged_date ind_integer_id    individual_id weight sex total_length tag_id serial_number comm_protocol frequency sensor_type #> 1     11722                  392        TRUE      TRUE 2024-11-11T12:02:00            321 MOVE-RUN-fane-01     NA   1           35    391 vignette_90SU           Ops        69    PRESSURE #> 2     11744                  392        TRUE      TRUE 2024-11-11T12:02:00            321 MOVE-RUN-fane-01     NA   1           35    391 vignette_90SU           Ops        69       DEPTH #> 3     11765                  394       FALSE      TRUE 2024-11-11T13:01:17            331  MOVE-RUN-raj-01     NA   2           80    393 vignette_SnRU           Ops        69    SALINITY"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"delete-an-individual-or-tag","dir":"Articles","previous_headings":"Initial Setup and Api Credentials","what":"Delete an individual or tag","title":"Create species, individuals, tags, sensors and link them all","text":"may sometimes one may associated wrong individual tag, simply information sensor wrong. API equipped individual methods let user update certain information specific tables fix issue. However, complex operation requires familiarisation relationship among tables. now, whenever situation nature appears, process fix consist ) deleting records concerning individual tag b) re-inserting earlier . section shows accomplish deletion operation, needs performed following strict order operations shown : Delete linked record tagged_individual table using tagged_individual_id field Delete sensor part sensors table using sensor_id field Delete tag part tags table using tags_id field Lastly delete individual individuals table using individual_id field four operations completed, can repeat process insert tagged individual shown . showcasing purposes, delete Raja undulata individual inserted . Please notice following: chunks tagged eval=FALSE avoid vignette failing , means run never . Bear mind running vignette ids used record deletion based previous insertion. Though sections show correct actual record ids, updated manually make vignette consistent","code":""},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"delete-tagged_individual-record","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > Delete an individual or tag","what":"Delete tagged_individual record","title":"Create species, individuals, tags, sensors and link them all","text":"","code":"ret <- templo_client$delete_single_record(end_point = \"tagged_individuals/\", data = list(   tagged_individual_id = 394 # id obtained from earlier section's dataframe )) ret"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"delete-sensor-record","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > Delete an individual or tag","what":"Delete sensor record","title":"Create species, individuals, tags, sensors and link them all","text":"","code":"ret <- templo_client$delete_single_record(end_point = \"sensors/\", data = list(   sensor_id = 11765 # id obtained from earlier section's dataframe )) ret"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"delete-tag-record","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > Delete an individual or tag","what":"Delete tag record","title":"Create species, individuals, tags, sensors and link them all","text":"","code":"ret <- templo_client$delete_single_record(end_point = \"tags/\", data = list(   tag_id = 393 # id obtained from earlier section's dataframe )) ret"},{"path":"https://d2gex.github.io/temploapiclient/articles/tagged_individuals.html","id":"delete-individual-record","dir":"Articles","previous_headings":"Initial Setup and Api Credentials > Delete an individual or tag","what":"Delete individual record","title":"Create species, individuals, tags, sensors and link them all","text":"Notice although field used delete record individuals table individual_id, value needs passed integer one unique string identifies individual within table. caused disagreement nomenclature.","code":"ret <- templo_client$delete_single_record(end_point = \"individuals/\", data = list(   individual_id = 331 # id obtained from earlier section's dataframe )) ret api_data <- templo_client$get_tagged_individuals(end_point = \"tagged_individuals/\") api_data %>%   dplyr::filter(stringr::str_detect(serial_number, \"vignette\")) %>%   assertr::verify(nrow(.) == 2)"},{"path":"https://d2gex.github.io/temploapiclient/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dan G. Author, maintainer.","code":""},{"path":"https://d2gex.github.io/temploapiclient/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"G D (2024). temploapiclient: REST API client TEMPLO. R package version 1.0.0, https://d2gex.github.io/temploapiclient/.","code":"@Manual{,   title = {temploapiclient: REST API client for TEMPLO},   author = {Dan G},   year = {2024},   note = {R package version 1.0.0},   url = {https://d2gex.github.io/temploapiclient/}, }"},{"path":"https://d2gex.github.io/temploapiclient/index.html","id":"high-level-system-design","dir":"","previous_headings":"","what":"REST API client for TEMPLO","title":"REST API client for TEMPLO","text":"Currently, clients sending data servers ocean using MQTT THELMA gateway. shown figure , bottom branch CETMAR SETTING section actually connected THELMA MQTT Broker, top branch used.","code":""},{"path":"https://d2gex.github.io/temploapiclient/index.html","id":"entity-relationship-diagram","dir":"","previous_headings":"","what":"Entity Relationship Diagram","title":"REST API client for TEMPLO","text":"entity-relationship model underlying database API built shown .","code":""},{"path":"https://d2gex.github.io/temploapiclient/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"REST API client for TEMPLO","text":"R package can installed devtools follows:","code":"devtools::install_github(\"https://github.com/d2gex/temploapiclient\", dep=TRUE)"},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":null,"dir":"Reference","previous_headings":"","what":"FieldValidatio class — FieldValidation","title":"FieldValidatio class — FieldValidation","text":"Provide validator certain relevant fields data needs send API","code":""},{"path":[]},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"FieldValidatio class — FieldValidation","text":"FieldValidation$valid_sex() FieldValidation$valid_bool_vector() FieldValidation$validate_datetime() FieldValidation$check_na_fields() FieldValidation$clone()","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"method-valid-sex-","dir":"Reference","previous_headings":"","what":"Method valid_sex()","title":"FieldValidatio class — FieldValidation","text":"Validate sex column dataframe  positive integer","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldValidatio class — FieldValidation","text":"","code":"FieldValidation$valid_sex(df, field)"},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FieldValidatio class — FieldValidation","text":"df dataframe values field field field name","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"method-valid-bool-vector-","dir":"Reference","previous_headings":"","what":"Method valid_bool_vector()","title":"FieldValidatio class — FieldValidation","text":"Validate values column indeed boolean equivalents","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldValidatio class — FieldValidation","text":"","code":"FieldValidation$valid_bool_vector(df, field)"},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"FieldValidatio class — FieldValidation","text":"df dataframe values field field field name","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"method-validate-datetime-","dir":"Reference","previous_headings":"","what":"Method validate_datetime()","title":"FieldValidatio class — FieldValidation","text":"Validate values column either datetime ymd_hms format date ymd format.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldValidatio class — FieldValidation","text":"","code":"FieldValidation$validate_datetime(df, field, is_datetime = TRUE)"},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"FieldValidatio class — FieldValidation","text":"df dataframe values field field field name is_datetime boolean flag indicating whether check datetime date","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"method-check-na-fields-","dir":"Reference","previous_headings":"","what":"Method check_na_fields()","title":"FieldValidatio class — FieldValidation","text":"Check whether NA values columns given dataframe","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldValidatio class — FieldValidation","text":"","code":"FieldValidation$check_na_fields(df, col_names)"},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"FieldValidatio class — FieldValidation","text":"df dataframe col_names character vector columnnames","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"FieldValidatio class — FieldValidation","text":"objects class cloneable method.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"FieldValidatio class — FieldValidation","text":"","code":"FieldValidation$clone(deep = FALSE)"},{"path":"https://d2gex.github.io/temploapiclient/reference/FieldValidation.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"FieldValidatio class — FieldValidation","text":"deep Whether make deep clone.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":null,"dir":"Reference","previous_headings":"","what":"IIMApiClient class — IIMApiClient","title":"IIMApiClient class — IIMApiClient","text":"Provides end--end queries required update details live acoustic telemetry system place","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"IIMApiClient class — IIMApiClient","text":"base_url string containing base url querying API (without end_point) part headers list HTTP headers token string authenticate API","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"IIMApiClient class — IIMApiClient","text":"base_url string containing base url querying API (without end_point) part","code":""},{"path":[]},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"IIMApiClient class — IIMApiClient","text":"IIMApiClient$new() IIMApiClient$post_data_to_api() IIMApiClient$delete_data_from_api() IIMApiClient$get_from_api() IIMApiClient$get_from_api_as_dataframe() IIMApiClient$clone()","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"IIMApiClient class — IIMApiClient","text":"Initialise IIMApiClient","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IIMApiClient class — IIMApiClient","text":"","code":"IIMApiClient$new(api_url, headers, token)"},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IIMApiClient class — IIMApiClient","text":"headers list HTTP headers token string authenticate API base_url string containing base url querying API (without end_point) part","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"method-post-data-to-api-","dir":"Reference","previous_headings":"","what":"Method post_data_to_api()","title":"IIMApiClient class — IIMApiClient","text":"Post nested list database API.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"IIMApiClient class — IIMApiClient","text":"","code":"IIMApiClient$post_data_to_api(obj, end_point)"},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"IIMApiClient class — IIMApiClient","text":"obj nested list resulting applying NestedListBuilder end_point string name end point queried. Default \"tags_with_sensors/\"","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"method-delete-data-from-api-","dir":"Reference","previous_headings":"","what":"Method delete_data_from_api()","title":"IIMApiClient class — IIMApiClient","text":"Delete single record database API","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"IIMApiClient class — IIMApiClient","text":"","code":"IIMApiClient$delete_data_from_api(obj, end_point)"},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"IIMApiClient class — IIMApiClient","text":"obj flat list ids unique field identifies record erased end_point string name end point queried. Default \"tags_with_sensors/\"","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"method-get-from-api-","dir":"Reference","previous_headings":"","what":"Method get_from_api()","title":"IIMApiClient class — IIMApiClient","text":"Make request API return data json object.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"IIMApiClient class — IIMApiClient","text":"","code":"IIMApiClient$get_from_api(end_point, parameters = NULL)"},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"IIMApiClient class — IIMApiClient","text":"end_point string name end point queried. Default \"tags_with_sensors/\" obj nested list resulting applying NestedListBuilder","code":""},{"path":[]},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"IIMApiClient class — IIMApiClient","text":"","code":"IIMApiClient$get_from_api_as_dataframe(end_point, parameters = NULL)"},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"IIMApiClient class — IIMApiClient","text":"objects class cloneable method.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"IIMApiClient class — IIMApiClient","text":"","code":"IIMApiClient$clone(deep = FALSE)"},{"path":"https://d2gex.github.io/temploapiclient/reference/IIMApiClient.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"IIMApiClient class — IIMApiClient","text":"deep Whether make deep clone.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":null,"dir":"Reference","previous_headings":"","what":"NestedListBuilder class — NestedListBuilder","title":"NestedListBuilder class — NestedListBuilder","text":"Convert dataframes nested lists according required case","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NestedListBuilder class — NestedListBuilder","text":"nested list element root level contains details tag sensor details. nested list element root level contains details tagged individual.","code":""},{"path":[]},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"NestedListBuilder class — NestedListBuilder","text":"NestedListBuilder$build_tag_with_sensor_list() NestedListBuilder$build_tagged_individual_list() NestedListBuilder$clone()","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"method-build-tag-with-sensor-list-","dir":"Reference","previous_headings":"","what":"Method build_tag_with_sensor_list()","title":"NestedListBuilder class — NestedListBuilder","text":"Given dataframe tag sensor details, returns 4-level nested list containing details tag along sensor details.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NestedListBuilder class — NestedListBuilder","text":"","code":"NestedListBuilder$build_tag_with_sensor_list(   df,   tag_prefix,   sensor_prefix,   root_field_names )"},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NestedListBuilder class — NestedListBuilder","text":"df dataframe tag sensor details tag_prefix string expected tag field prefix sensor_prefix string expected sensor field prefix root_field_names string vector names outer element built list","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"method-build-tagged-individual-list-","dir":"Reference","previous_headings":"","what":"Method build_tagged_individual_list()","title":"NestedListBuilder class — NestedListBuilder","text":"Given dataframe individual, tag sensor tagged_individual details returns 3-level nested list containing details","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"NestedListBuilder class — NestedListBuilder","text":"","code":"NestedListBuilder$build_tagged_individual_list(   df,   ind_prefix,   tag_prefix,   sensor_prefix,   tagged_ind_prefix,   root_field_names )"},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"NestedListBuilder class — NestedListBuilder","text":"df dataframe tag sensor details ind_prefix string expected individual field prefix tag_prefix string expected tag field prefix sensor_prefix string expected sensor field prefix tagged_ind_prefix string expected tagged_individual field prefix root_field_names string vector names outer element built list strict order (individual, tag, sensor)","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"NestedListBuilder class — NestedListBuilder","text":"objects class cloneable method.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"NestedListBuilder class — NestedListBuilder","text":"","code":"NestedListBuilder$clone(deep = FALSE)"},{"path":"https://d2gex.github.io/temploapiclient/reference/NestedListBuilder.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"NestedListBuilder class — NestedListBuilder","text":"deep Whether make deep clone.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":null,"dir":"Reference","previous_headings":"","what":"TemploApi class — TemploApiClient","title":"TemploApi class — TemploApiClient","text":"API client consume TEMPLO's API","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TemploApi class — TemploApiClient","text":"TRUE FALSE TRUE FALSE record data sent plus unique identifier generated remote database dataframe sought information. dataframe sought information. dataframe sought information. dataframe sought information. TRUE successfully completed. Error message otherwise.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"TemploApi class — TemploApiClient","text":"base_url string containing base url querying API (without end_point) part headers list HTTP headers token string authenticate API","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"TemploApi class — TemploApiClient","text":"base_url string containing base url querying API (without end_point) part","code":""},{"path":[]},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"TemploApi class — TemploApiClient","text":"TemploApiClient$new() TemploApiClient$add_species() TemploApiClient$add_tagged_individuals() TemploApiClient$add_single_record_and_fetch_id() TemploApiClient$get_sensor_types() TemploApiClient$get_tagged_individuals() TemploApiClient$get_environmental_readings() TemploApiClient$get_dataframe_end_point() TemploApiClient$delete_single_record() TemploApiClient$clone()","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"TemploApi class — TemploApiClient","text":"Initialise IIMApiClient","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$new(api_url, headers, token)"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"headers list HTTP headers token string authenticate API base_url string containing base url querying API (without end_point) part","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-add-species-","dir":"Reference","previous_headings":"","what":"Method add_species()","title":"TemploApi class — TemploApiClient","text":"Add dataframe unique species database API. One insertion done per species. Species failing inserted whatever reason reported stdout, along error. sucesfully inserted listed. case either none inserted, final output report .","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$add_species(df, end_point = \"species/\")"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"end_point string name end point queried.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-add-tagged-individuals-","dir":"Reference","previous_headings":"","what":"Method add_tagged_individuals()","title":"TemploApi class — TemploApiClient","text":"Add dataframe tagged_individuals database API. One insertion done per individual, irrespective many rows individual may due associated sensors. Individuals failing inserted whatever reason reported stdout, along error. sucesfully inserted listed. case either none inserted, final output report .","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$add_tagged_individuals(   df,   individual_prefix,   tag_prefix,   sensor_prefix,   tagged_individual_prefix,   field_names = c(\"individual_data\", \"tag_data\", \"sensors_data\",     \"tagged_individual_data\"),   end_point = \"tagged_individuals/\" )"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"df dataframe pontetial multiple-row individuals (multiple sensors); one row otherwise. individual_prefix string identifying columns belong individual dataset tag_prefix string identifying columns belong tag dataset sensor_prefix string identifying columns belong sensor dataset tagged_individual_prefix string identifying columns belong tagged_individual dataset field_names character vector containing names datasets sent API end_point string name end point queried.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-add-single-record-and-fetch-id-","dir":"Reference","previous_headings":"","what":"Method add_single_record_and_fetch_id()","title":"TemploApi class — TemploApiClient","text":"General method add single record database API","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$add_single_record_and_fetch_id(end_point, data)"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"end_point string name end point queried. data flat list fields record sent.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-get-sensor-types-","dir":"Reference","previous_headings":"","what":"Method get_sensor_types()","title":"TemploApi class — TemploApiClient","text":"Get sensor types currently database","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$get_sensor_types(end_point = \"sensortypes/\")"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"end_point string name end point queried.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-get-tagged-individuals-","dir":"Reference","previous_headings":"","what":"Method get_tagged_individuals()","title":"TemploApi class — TemploApiClient","text":"Get tagged individuals database. operation may take seconds makes two API calls: one get tagged_individual data another one get sensor types. final result merge retrieved datasets.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$get_tagged_individuals(   end_point,   tagged_individual_fields = TAGGED_INDVIDUAL_FIELDS )"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"end_point string name end point queried. tagged_individual_fields list sections fields per section retrieved.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-get-environmental-readings-","dir":"Reference","previous_headings":"","what":"Method get_environmental_readings()","title":"TemploApi class — TemploApiClient","text":"Get environmental data API emitted receptors","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$get_environmental_readings(   end_point = \"environmental_readings/data_exports/\",   from_date,   to_date )"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"end_point string name end point queried. from_date yms format string start date to_date yms format string end_date","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-get-dataframe-end-point-","dir":"Reference","previous_headings":"","what":"Method get_dataframe_end_point()","title":"TemploApi class — TemploApiClient","text":"General method get data API dataframe format.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$get_dataframe_end_point(end_point, parameters = NULL)"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"end_point string name end point queried. parameters named list potential parameters pass API query. Default NULL","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-delete-single-record-","dir":"Reference","previous_headings":"","what":"Method delete_single_record()","title":"TemploApi class — TemploApiClient","text":"General method delete data API.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$delete_single_record(end_point, data)"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"end_point string name end point queried. data flat list unique fields identifying record deleted","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"TemploApi class — TemploApiClient","text":"objects class cloneable method.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"TemploApi class — TemploApiClient","text":"","code":"TemploApiClient$clone(deep = FALSE)"},{"path":"https://d2gex.github.io/temploapiclient/reference/TemploApiClient.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"TemploApi class — TemploApiClient","text":"deep Whether make deep clone.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://d2gex.github.io/temploapiclient/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://d2gex.github.io/temploapiclient/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
